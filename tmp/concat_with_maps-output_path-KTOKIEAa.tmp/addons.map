{"version":3,"sources":["ember-cli-app-version/components/app-version.js","ember-cli-app-version/initializer-factory.js","ember-cli-app-version/templates/app-version.js","ember-cli-app-version.js","ember-cli-content-security-policy.js","ember-data-fixture-adapter/index.js","ember-data-fixture-adapter.js"],"sourcesContent":["define('ember-cli-app-version/components/app-version', ['exports', 'ember', 'ember-cli-app-version/templates/app-version'], function (exports, Ember, layout) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'span',\n    layout: layout['default']\n  });\n\n});","define('ember-cli-app-version/initializer-factory', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n\n\n  exports['default'] = initializerFactory;\n  var classify = Ember['default'].String.classify;\n\n  function initializerFactory(name, version) {\n    var registered = false;\n\n    return function () {\n      if (!registered && name && version) {\n        var appName = classify(name);\n        Ember['default'].libraries.register(appName, version);\n        registered = true;\n      }\n    };\n  }\n\n});","define('ember-cli-app-version/templates/app-version', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"modules/ember-cli-app-version/templates/app-version.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [\n        [\"content\",\"version\",[\"loc\",[null,[1,0],[1,11]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('ember-cli-app-version', ['ember-cli-app-version/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n","define('ember-cli-content-security-policy', ['ember-cli-content-security-policy/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n","define('ember-data-fixture-adapter/index', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {\n\n  'use strict';\n\n  var get = Ember['default'].get;\n  var indexOf = Array.prototype.indexOf && function (array, item) {\n    return array.indexOf(item);\n  } || Ember['default'].EnumerableUtils.indexOf;\n\n  var map = Array.prototype.map && function (array, cb, binding) {\n    return array.map(cb, binding);\n  } || Ember['default'].EnumerableUtils.map;\n\n  var counter = 0;\n\n  /**\n    `DS.FixtureAdapter` is an adapter that loads records from memory.\n    It's primarily used for development and testing. You can also use\n    `DS.FixtureAdapter` while working on the API but is not ready to\n    integrate yet. It is a fully functioning adapter. All CRUD methods\n    are implemented. You can also implement query logic that a remote\n    system would do. It's possible to develop your entire application\n    with `DS.FixtureAdapter`.\n\n    For information on how to use the `FixtureAdapter` in your\n    application please see the [FixtureAdapter\n    guide](/guides/models/the-fixture-adapter/).\n\n    @class FixtureAdapter\n    @namespace DS\n    @extends DS.Adapter\n  */\n  exports['default'] = DS['default'].Adapter.extend({\n    defaultSerializer: '-default',\n\n    // The fixture adapter does not support coalesceFindRequests\n    coalesceFindRequests: false,\n\n    /**\n      If `simulateRemoteResponse` is `true` the `FixtureAdapter` will\n      wait a number of milliseconds before resolving promises with the\n      fixture values. The wait time can be configured via the `latency`\n      property.\n       @property simulateRemoteResponse\n      @type {Boolean}\n      @default true\n    */\n    simulateRemoteResponse: true,\n\n    /**\n      By default the `FixtureAdapter` will simulate a wait of the\n      `latency` milliseconds before resolving promises with the fixture\n      values. This behavior can be turned off via the\n      `simulateRemoteResponse` property.\n       @property latency\n      @type {Number}\n      @default 50\n    */\n    latency: 50,\n\n    /**\n      Implement this method in order to provide data associated with a type\n       @method fixturesForType\n      @param {Subclass of DS.Model} typeClass\n      @return {Array}\n    */\n    fixturesForType: function fixturesForType(typeClass) {\n      if (typeClass.FIXTURES) {\n        var fixtures = typeClass.FIXTURES;\n        return map(fixtures, function (fixture) {\n          var fixtureIdType = typeof fixture.id;\n          if (fixtureIdType !== 'number' && fixtureIdType !== 'string') {\n            throw new Error('the id property must be defined as a number or string for fixture ' + fixture);\n          }\n          fixture.id = fixture.id + '';\n          return fixture;\n        });\n      }\n      return null;\n    },\n\n    /**\n      Implement this method in order to query fixtures data\n       @method queryFixtures\n      @param {Array} fixture\n      @param {Object} query\n      @param {Subclass of DS.Model} typeClass\n      @return {Promise|Array}\n    */\n    queryFixtures: function queryFixtures() /*fixtures, query, typeClass*/{\n      Ember['default'].assert('Not implemented: You must override the DS.FixtureAdapter::queryFixtures method to support querying the fixture store.');\n    },\n\n    /**\n      @method updateFixtures\n      @param {Subclass of DS.Model} typeClass\n      @param {Array} fixture\n    */\n    updateFixtures: function updateFixtures(typeClass, fixture) {\n      if (!typeClass.FIXTURES) {\n        typeClass.reopenClass({\n          FIXTURES: []\n        });\n      }\n\n      var fixtures = typeClass.FIXTURES;\n\n      this.deleteLoadedFixture(typeClass, fixture);\n\n      fixtures.push(fixture);\n    },\n\n    /**\n      Implement this method in order to provide json for CRUD methods\n       @method mockJSON\n      @param {DS.Store} store\n      @param {Subclass of DS.Model} typeClass\n      @param {DS.Snapshot} snapshot\n    */\n    mockJSON: function mockJSON(store, typeClass, snapshot) {\n      return store.serializerFor(snapshot.modelName).serialize(snapshot, { includeId: true });\n    },\n\n    /**\n      @method generateIdForRecord\n      @param {DS.Store} store\n      @param {DS.Model} record\n      @return {String} id\n    */\n    generateIdForRecord: function generateIdForRecord() /*store*/{\n      return 'fixture-' + counter++;\n    },\n\n    /**\n      @method find\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {String} id\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    find: function find(store, typeClass, id /*, snapshot*/) {\n      var fixtures = this.fixturesForType(typeClass);\n      var fixture;\n\n      Ember['default'].assert('Unable to find fixtures for model type ' + typeClass.toString() + '. If you\\'re defining your fixtures using \\'Model.FIXTURES = ...\\'\\', please change it to \\'Model.reopenClass({ FIXTURES: ... })\\'.', fixtures);\n\n      if (fixtures) {\n        fixture = Ember['default'].A(fixtures).findBy('id', id);\n      }\n\n      if (fixture) {\n        return this.simulateRemoteCall(function () {\n          return fixture;\n        });\n      }\n    },\n\n    /**\n      @method findMany\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {Array} ids\n      @param {Array} snapshots\n      @return {Promise} promise\n    */\n    findMany: function findMany(store, typeClass, ids /*, snapshots*/) {\n      var fixtures = this.fixturesForType(typeClass);\n\n      Ember['default'].assert('Unable to find fixtures for model type ' + typeClass.toString(), fixtures);\n\n      if (fixtures) {\n        fixtures = fixtures.filter(function (item) {\n          return indexOf(ids, item.id) !== -1;\n        });\n      }\n\n      if (fixtures) {\n        return this.simulateRemoteCall(function () {\n          return fixtures;\n        });\n      }\n    },\n\n    /**\n      @private\n      @method findAll\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {String} sinceToken\n      @return {Promise} promise\n    */\n    findAll: function findAll(store, typeClass) {\n      var fixtures = this.fixturesForType(typeClass);\n\n      Ember['default'].assert('Unable to find fixtures for model type ' + typeClass.toString(), fixtures);\n\n      return this.simulateRemoteCall(function () {\n        return fixtures;\n      });\n    },\n\n    /**\n      @private\n      @method findQuery\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {Object} query\n      @param {DS.AdapterPopulatedRecordArray} recordArray\n      @return {Promise} promise\n    */\n    findQuery: function findQuery(store, typeClass, query /*, array*/) {\n      var fixtures = this.fixturesForType(typeClass);\n\n      Ember['default'].assert('Unable to find fixtures for model type ' + typeClass.toString(), fixtures);\n\n      fixtures = this.queryFixtures(fixtures, query, typeClass);\n\n      if (fixtures) {\n        return this.simulateRemoteCall(function () {\n          return fixtures;\n        });\n      }\n    },\n\n    /**\n      @method createRecord\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    createRecord: function createRecord(store, typeClass, snapshot) {\n      var fixture = this.mockJSON(store, typeClass, snapshot);\n\n      this.updateFixtures(typeClass, fixture);\n\n      return this.simulateRemoteCall(function () {\n        return fixture;\n      });\n    },\n\n    /**\n      @method updateRecord\n      @param {DS.Store} store\n      @param {subclass of DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    updateRecord: function updateRecord(store, typeClass, snapshot) {\n      var fixture = this.mockJSON(store, typeClass, snapshot);\n\n      this.updateFixtures(typeClass, fixture);\n\n      return this.simulateRemoteCall(function () {\n        return fixture;\n      });\n    },\n\n    /**\n      @method deleteRecord\n      @param {DS.Store} store\n      @param {subclass of DS.Model} typeClass\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    deleteRecord: function deleteRecord(store, typeClass, snapshot) {\n      this.deleteLoadedFixture(typeClass, snapshot);\n\n      return this.simulateRemoteCall(function () {\n        return null;\n      });\n    },\n\n    /*\n      @method deleteLoadedFixture\n      @private\n      @param typeClass\n      @param snapshot\n    */\n    deleteLoadedFixture: function deleteLoadedFixture(typeClass, snapshot) {\n      var existingFixture = this.findExistingFixture(typeClass, snapshot);\n\n      if (existingFixture) {\n        var index = indexOf(typeClass.FIXTURES, existingFixture);\n        typeClass.FIXTURES.splice(index, 1);\n        return true;\n      }\n    },\n\n    /*\n      @method findExistingFixture\n      @private\n      @param typeClass\n      @param snapshot\n    */\n    findExistingFixture: function findExistingFixture(typeClass, snapshot) {\n      var fixtures = this.fixturesForType(typeClass);\n      var id = snapshot.id;\n\n      return this.findFixtureById(fixtures, id);\n    },\n\n    /*\n      @method findFixtureById\n      @private\n      @param fixtures\n      @param id\n    */\n    findFixtureById: function findFixtureById(fixtures, id) {\n      return Ember['default'].A(fixtures).find(function (r) {\n        return '' + get(r, 'id') === '' + id;\n      });\n    },\n\n    /*\n      @method simulateRemoteCall\n      @private\n      @param callback\n      @param context\n    */\n    simulateRemoteCall: function simulateRemoteCall(callback, context) {\n      var adapter = this;\n\n      return new Ember['default'].RSVP.Promise(function (resolve) {\n        var value = Ember['default'].copy(callback.call(context), true);\n        if (get(adapter, 'simulateRemoteResponse')) {\n          // Schedule with setTimeout\n          Ember['default'].run.later(null, resolve, value, get(adapter, 'latency'));\n        } else {\n          // Asynchronous, but at the of the runloop with zero latency\n          resolve(value);\n        }\n      }, 'DS: FixtureAdapter#simulateRemoteCall');\n    }\n  });\n\n});","define('ember-data-fixture-adapter', ['ember-data-fixture-adapter/index', 'ember', 'exports'], function(__index__, __Ember__, __exports__) {\n  'use strict';\n  var keys = Object.keys || __Ember__['default'].keys;\n  var forEach = Array.prototype.forEach && function(array, cb) {\n    array.forEach(cb);\n  } || __Ember__['default'].EnumerableUtils.forEach;\n\n  forEach(keys(__index__), (function(key) {\n    __exports__[key] = __index__[key];\n  }));\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}